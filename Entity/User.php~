<?php

namespace Viva\AuthBundle\Entity;
use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;

#custom use
use Viva\BravoBundle\Entity\Deal;
use Viva\BravoBundle\Entity\Offer;
use Viva\BravoBundle\Entity\Queue;
###


/**
 * @ORM\Entity
 * @UniqueEntity("username")
 * @UniqueEntity("email")
 * @ORM\Table(name="Users")
 * @ORM\Entity(repositoryClass="Viva\AuthBundle\Entity\UserRepository")
 */
class User implements UserInterface, \Serializable {
	
	const STATUS_ONLINE			= 10;
	const STATUS_AWAY			= 11;

	public static function getAllStatus() {
		$a = array(
			self::STATUS_ONLINE =>		'Online',
			self::STATUS_AWAY =>		'Away',
			);
		return $a;
	}
	public function getStatusName() {
		foreach(self::getAllStatus() as $key=>$value) {
			if($key == $this->status) {
				return $value;
			}
		}
		return 'Unknown';		
	}
	
	
	
    /**
	 * @ORM\Column(type="integer")
	 * @ORM\Id
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
    private $id;

    /**
	 * @ORM\Column(type="string", length=25, unique=true)
	 * @Assert\Type(type="string")
	 * @Assert\NotBlank()
	 * @Assert\Length(min = "3", max="25");
	 */
    private $username;

    /**
	 * @ORM\Column(type="string", length=32)
	 */
    private $salt;

    /**
	 * @ORM\Column(type="string", length=88)
	 */
    private $password;

    /**
	 * @ORM\Column(type="string", length=60, unique=true)
	 * @Assert\Type(type="string")
	 * @Assert\NotBlank()
	 * @Assert\Length(min = "3", max="60");
	 */
    private $email;

    /**
	 * @ORM\Column(type="string", length=60)
	 * @Assert\NotBlank()
	 * @Assert\Length(min = "3", max="60");
	 * @Assert\Type(type="string")
	 */
    private $fullname;

    /**
	 * @ORM\Column(type="string", length=10, nullable=true)
	 * @Assert\NotBlank()
	 * @Assert\Length(min = "2", max="10");
	 * @Assert\Type(type="string")
	 */
    private $initials;

    /**
	 * @ORM\Column(type="string", length=60, nullable=true)
	 * @Assert\Length(max="60");
	 * @Assert\Type(type="string")
	 */
    private $jobtitle;

    /**
	 * @ORM\Column(type="string", length=60, nullable=true)
	 * @Assert\Length(max="60");
	 * @Assert\Type(type="string")
	 */
    private $department;

    /**
	 * @ORM\Column(type="string", length=60, nullable=true)
	 * @Assert\Length(max="60");
	 * @Assert\Type(type="string")
	 */
    private $location;
	
    /**
	 * @ORM\Column(type="string", length=20, nullable=true)
	 * @Assert\Length(max="20");
	 * @Assert\Type(type="string")
	 */
    private $telephone;

    /**
     * @ORM\ManyToMany(targetEntity="Group", inversedBy="users")
     *
     */
    private $groups;
	
	/**
	 * @ORM\Column(name="active", type="boolean")
	 */
    private $active;
	
	
	
	
	/**
     * @var \DateTime
     *
     * @ORM\Column(name="lastactivity", type="datetime", nullable=true)
     */
    private $lastactivity;
	
	/**
     * @var \DateTime
     *
     * @ORM\Column(name="lastresponse", type="datetime", nullable=true)
     */
    private $lastresponse;
	
    /**
     * @var integer
     *
     * @ORM\Column(name="status", type="integer", nullable=true)
     */
    private $status;

	
##############CUSTOM FIELDS#####################
    /**
     * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Deal", mappedBy="user", cascade={"persist", "remove"})
     */
	private $deals;

	/**
	* @var \Viva\BravoBundle\Entity\History
	* 
	* @ORM\OneToMany(targetEntity="Viva\BravoBundle\Entity\History", mappedBy="user", cascade={"persist", "remove"})
	*/
	private $history;
	
	/**
	* @var \Viva\BravoBundle\Entity\Action
	* 
	* @ORM\OneToMany(targetEntity="Viva\BravoBundle\Entity\Action", mappedBy="user", cascade={"persist"})
	* @ORM\OrderBy({"when" = "DESC"})
	*/
	private $action;

	/**
	 * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Queue", mappedBy="users1")
	 * @ORM\OrderBy({"priority" = "DESC"})
	 */
	protected $queues1;

	/**
	 * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Queue", mappedBy="users2")
	 * @ORM\OrderBy({"priority" = "DESC"})
	 */
	protected $queues2;

	/**
	 * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Queue", mappedBy="users3")
	 * @ORM\OrderBy({"priority" = "DESC"})
	 */
	protected $queues3;

	/**
	 * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Queue", mappedBy="users4")
	 * @ORM\OrderBy({"priority" = "DESC"})
	 */
	protected $queues4;


	/**
     * @ORM\ManyToMany(targetEntity="Viva\BravoBundle\Entity\Queue", mappedBy="sendtousers")
     * @ORM\OrderBy({"name" = "ASC"})
	 */
	protected $sendtoqueues;    

	/**
	* @var \Viva\BravoBundle\Entity\Action
	* 
	* @ORM\OneToMany(targetEntity="Viva\BravoBundle\Entity\Offer", mappedBy="user")
	*/
	private $offer;
#############################################

    public function __construct()
    {
        $this->isActive = true;
        $this->salt = md5(uniqid(null, true));
		$this->active = true;
		$this->groups = new ArrayCollection();
		$this->history = new ArrayCollection();
		$this->action = new ArrayCollection();
    }

    /**
	 * @inheritDoc
	 */
    public function getUsername()
    {
        return $this->username;
    }
	
	public function newSalt() {
		$this->salt = md5(uniqid(null, true));
	}

	/**
	 * @inheritDoc
	 */
    public function getSalt()
    {
        return $this->salt;
    }

    /**
	 * @inheritDoc
	 */
    public function getPassword()
    {
        return $this->password;
    }

    /**
	 * @inheritDoc
	 */
	public function getRoles()
	{
		return $this->groups->toArray();
	}
	
    /**
	 * @inheritDoc
	 */
    public function eraseCredentials()
    {
    }

    /**
	 * @see \Serializable::serialize()
	 */
    public function serialize()
    {
        return serialize(array(
            $this->id,
        ));
    }

    /**
	 * @see \Serializable::unserialize()
	 */
    public function unserialize($serialized)
    {
        list (
            $this->id,
        ) = unserialize($serialized);
    }

	



    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

	
	
    /**
     * Set salt
     *
     * @param string $salt
     * @return User
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;

        return $this;
    }

    /**
     * Set password
     *
     * @param string $password
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set fullname
     *
     * @param string $fullname
     * @return User
     */
    public function setFullname($fullname)
    {
        $this->fullname = $fullname;

        return $this;
    }

    /**
     * Get fullname
     *
     * @return string 
     */
    public function getFullname()
    {
        return $this->fullname;
    }

    /**
     * Set initials
     *
     * @param string $initials
     * @return User
     */
    public function setInitials($initials)
    {
        $this->initials = $initials;

        return $this;
    }

    /**
     * Get initials
     *
     * @return string 
     */
    public function getInitials()
    {
        return $this->initials;
    }

    /**
     * Set jobtitle
     *
     * @param string $jobtitle
     * @return User
     */
    public function setJobtitle($jobtitle)
    {
        $this->jobtitle = $jobtitle;

        return $this;
    }

    /**
     * Get jobtitle
     *
     * @return string 
     */
    public function getJobtitle()
    {
        return $this->jobtitle;
    }

    /**
     * Set department
     *
     * @param string $department
     * @return User
     */
    public function setDepartment($department)
    {
        $this->department = $department;

        return $this;
    }

    /**
     * Get department
     *
     * @return string 
     */
    public function getDepartment()
    {
        return $this->department;
    }

    /**
     * Set location
     *
     * @param string $location
     * @return User
     */
    public function setLocation($location)
    {
        $this->location = $location;

        return $this;
    }

    /**
     * Get location
     *
     * @return string 
     */
    public function getLocation()
    {
        return $this->location;
    }

    /**
     * Set telephone
     *
     * @param string $telephone
     * @return User
     */
    public function setTelephone($telephone)
    {
        $this->telephone = $telephone;

        return $this;
    }

    /**
     * Get telephone
     *
     * @return string 
     */
    public function getTelephone()
    {
        return $this->telephone;
    }

    /**
     * Set active
     *
     * @param boolean $active
     * @return User
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean 
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Add groups
     *
     * @param \Viva\AuthBundle\Entity\Group $groups
     * @return User
     */
    public function addGroup(\Viva\AuthBundle\Entity\Group $groups)
    {
        $this->groups[] = $groups;

        return $this;
    }

    /**
     * Remove groups
     *
     * @param \Viva\AuthBundle\Entity\Group $groups
     */
    public function removeGroup(\Viva\AuthBundle\Entity\Group $groups)
    {
        $this->groups->removeElement($groups);
    }

    /**
     * Get groups
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getGroups()
    {
        return $this->groups;
    }

    /**
     * Add deals
     *
     * @param \Viva\BravoBundle\Entity\Deal $deals
     * @return User
     */
    public function addDeal(\Viva\BravoBundle\Entity\Deal $deals)
    {
        $this->deals[] = $deals;

        return $this;
    }

    /**
     * Remove deals
     *
     * @param \Viva\BravoBundle\Entity\Deal $deals
     */
    public function removeDeal(\Viva\BravoBundle\Entity\Deal $deals)
    {
        $this->deals->removeElement($deals);
    }

    /**
     * Get deals
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getDeals()
    {
		$a = new ArrayCollection();
		foreach($this->deals as $row) {
			if($row->getStatus() == Deal::STATUS_OPEN) {
				$a[] = $row;
			}
		}
        return $a;
    }

    /**
     * Add history
     *
     * @param \Viva\BravoBundle\Entity\History $history
     * @return User
     */
    public function addHistory(\Viva\BravoBundle\Entity\History $history)
    {
        $this->history[] = $history;

        return $this;
    }

    /**
     * Remove history
     *
     * @param \Viva\BravoBundle\Entity\History $history
     */
    public function removeHistory(\Viva\BravoBundle\Entity\History $history)
    {
        $this->history->removeElement($history);
    }

    /**
     * Get history
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getHistory()
    {
        return $this->history;
    }

    /**
     * Add action
     *
     * @param \Viva\BravoBundle\Entity\Action $action
     * @return User
     */
    public function addAction(\Viva\BravoBundle\Entity\Action $action)
    {
        $this->action[] = $action;

        return $this;
    }

    /**
     * Remove action
     *
     * @param \Viva\BravoBundle\Entity\Action $action
     */
    public function removeAction(\Viva\BravoBundle\Entity\Action $action)
    {
        $this->action->removeElement($action);
    }

    /**
     * Get action
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getAction()
    {
        return $this->action;
    }


    /**
     * Add offers
     *
     * @param \Viva\BravoBundle\Entity\Offer $offers
     * @return User
     */
    public function addOffer(\Viva\BravoBundle\Entity\Offer $offers)
    {
        $this->offers[] = $offers;

        return $this;
    }

    /**
     * Remove offers
     *
     * @param \Viva\BravoBundle\Entity\Offer $offers
     */
    public function removeOffer(\Viva\BravoBundle\Entity\Offer $offers)
    {
        $this->offers->removeElement($offers);
    }

    /**
     * Get offer
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getOffer()
    {
		$a = new ArrayCollection();
		foreach($this->offer as $row) {
			if($row->getType() == Offer::TYPE_OFFER) {
				$a[] = $row;
			}
		}
        return $a;
    }
	
	public function getAllOffers() {
		$a = new ArrayCollection();
		
		foreach($this->offer as $row) {
			if($row->getType() == Offer::TYPE_OFFER) {
				$a[] = $row->getCustomer();
			}
		}
		
		foreach($this->queues as $row) {
			if($row->getType() == Queue::TYPE_SHARED) {
				foreach($row->getCustomers() as $customer) {
					if(!count($customer->getOffer())) {					//only get customers in the queue that havent been picked up by anyone else yet
						$a[] = $customer;
					}
				}
			}
		}
		return $a;
	}
	
	
	
    /**
     * Get customers
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCustomers()
    {
		$a = new ArrayCollection();
		foreach($this->offer as $row) {
			if($row->getType() == Offer::TYPE_ACCEPTED) {
				$a[] = $row;
			}
		}
        return $a;
    }

    /**
     * Set lastactivity
     *
     * @param \DateTime $lastactivity
     * @return User
     */
    public function setLastactivity($lastactivity)
    {
        $this->lastactivity = $lastactivity;

        return $this;
    }

    /**
     * Get lastactivity
     *
     * @return \DateTime 
     */
    public function getLastactivity()
    {
        return $this->lastactivity;
    }

    /**
     * Set status
     *
     * @param integer $status
     * @return User
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return integer 
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set lastresponse
     *
     * @param \DateTime $lastresponse
     * @return User
     */
    public function setLastresponse($lastresponse)
    {
        $this->lastresponse = $lastresponse;

        return $this;
    }

    /**
     * Get lastresponse
     *
     * @return \DateTime 
     */
    public function getLastresponse()
    {
        return $this->lastresponse;
    }

    /**
     * Add sendtoqueues
     *
     * @param \Viva\BravoBundle\Entity\Queue $sendtoqueues
     * @return User
     */
    public function addSendtoqueue(\Viva\BravoBundle\Entity\Queue $sendtoqueues)
    {
		if(!$sendtoqueues) return;
        $this->sendtoqueues[] = $sendtoqueues;
		$sendtoqueues->addSendtoUser($this);														#REQUIRED WHEN UPDATING ON INVERSE SIDE - IN COMBINATION WITH BY_REFERENCE IN THE CREATE FORM
		
        return $this;
    }

    /**
     * Remove sendtoqueues
     *
     * @param \Viva\BravoBundle\Entity\Queue $sendtoqueues
     */
    public function removeSendtoqueue(\Viva\BravoBundle\Entity\Queue $sendtoqueues)
    {
		if(!$sendtoqueues) return;
        $this->sendtoqueues->removeElement($sendtoqueues);
		$sendtoqueues->removeSendtoUser($this);														#REQUIRED WHEN UPDATING ON INVERSE SIDE - IN COMBINATION WITH BY_REFERENCE IN THE CREATE FORM
    }

    /**
     * Get sendtoqueues
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getSendtoqueues()
    {
        return $this->sendtoqueues;
    }
}
